<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Datagrams on the Wings of Pigeons]]></title>
  <link href="http://thutch.github.io/atom.xml" rel="self"/>
  <link href="http://thutch.github.io/"/>
  <updated>2013-12-22T10:30:14-06:00</updated>
  <id>http://thutch.github.io/</id>
  <author>
    <name><![CDATA[Tim Hutchison]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OO Recursive Search]]></title>
    <link href="http://thutch.github.io/blog/2013/12/17/oo-recursive-search/"/>
    <updated>2013-12-17T08:55:00-06:00</updated>
    <id>http://thutch.github.io/blog/2013/12/17/oo-recursive-search</id>
    <content type="html"><![CDATA[<p>This is a further exploration on the topic of OO Recursion.  In the last post, we looked at seeding Mancala wells.  In this post we&rsquo;ll look at searching for an object in an OO Recursive fashion.</p>

<p>To start things off, here is our simple Node class;</p>

<figure class='code'><figcaption><span>Simple Node class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Node</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>      <span class="vi">@children</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_child</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@children</span> <span class="o">&lt;&lt;</span> <span class="n">child</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">find_node_named</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@name</span> <span class="o">==</span> <span class="nb">name</span>
</span><span class='line'>          <span class="k">return</span> <span class="nb">self</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@children</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span>
</span><span class='line'>          <span class="n">found</span> <span class="o">=</span> <span class="n">child</span><span class="o">.</span><span class="n">find_node_named</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">found</span> <span class="o">!=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">found</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="kp">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our Node class has a name and keeps a collection of its children.  There is the add_child method that adds a child to its collection of children.</p>

<p>The find_node_named method will be of most interest to us.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">find_node_named</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@name</span> <span class="o">==</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">self</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@children</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span>
</span><span class='line'>      <span class="n">found</span> <span class="o">=</span> <span class="n">child</span><span class="o">.</span><span class="n">find_node_named</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">found</span> <span class="o">!=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">found</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="kp">nil</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method has one parameter, name,  that is used to look for the node of interest.</p>

<p>The first thing that is done is checking to see if this node is the one being searched for.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="vi">@name</span> <span class="o">==</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">self</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the base case. If the parameter name and the node&rsquo;s name match, then self is returned and the search is complete. The object knows about itself and can determine if it is the object being searched for or not.</p>

<p>If this is not the object we are looking for then the search continues on the objects children.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@children</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span>
</span><span class='line'>  <span class="n">found</span> <span class="o">=</span> <span class="n">child</span><span class="o">.</span><span class="n">find_node_named</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">found</span> <span class="o">!=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">found</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The nodes children are iterated over, sending the find_node_named to each one till it is found or there are no more children. If the node is found then the found node is immediately returned to the caller.</p>

<p>The last line in the find_node_named method returns nil if the node is not found.  When the the inidtial test of name against the current node&rsquo;s @name identifier do not match, the method will then iterate over the objects children.  If the iteration over the children does not find the node identified as the parameter name, then nil is returned.</p>

<p>Pretty straight forward.</p>

<p>Next lets add a leaf node.</p>

<figure class='code'><figcaption><span>LeafNode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">LeafNode</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:id</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@id</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_child</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">#do nothing</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">find_node_named</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@id</span> <span class="o">==</span> <span class="nb">name</span>
</span><span class='line'>          <span class="k">return</span> <span class="nb">self</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="kp">nil</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The LeafNode provides the same api&rsquo;s as the Node. Though as a leaf node, it will not have children  and the add_child method will do nothing, a no-op.</p>

<p>Just to make it more interesting,  instead of an instvar named @name to identify the node,  the instvar for the identifier has been changed to @id.</p>

<p>Based upon the way we wrote our original find_node_named method in Node,  we won&rsquo;t have to handle the case of a LeafNode&rsquo;s identifier @id when searching through the Node&rsquo;s collection of children.</p>

<p>The LeafNode demonstrates polymorphic behavior of the Node for the search.  A different object (LeafNode) has been thrown into the data structure and for the purpose of the search provides similar behavior as Node.  Since the Node and LeafNode know how to test themselves and search their children, in the case of Node, then the addition of the LeafNode doesn&rsquo;t disrupt the original Node
find_node_named method to handle LeafNode.</p>

<p>OO recursion can make search complex structures much simpler when taking advantage of the power of the object and data encapsulation.  Let the objects do the work.</p>

<p>Here&rsquo;s a link to the example provided; <a href=https://gist.github.com/thutch/8084791>OO Recursive Search gist</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object-Oriented Recursion]]></title>
    <link href="http://thutch.github.io/blog/2012/04/15/object-oriented-recursion/"/>
    <updated>2012-04-15T11:16:00-05:00</updated>
    <id>http://thutch.github.io/blog/2012/04/15/object-oriented-recursion</id>
    <content type="html"><![CDATA[<p>To understand recursion,  you must first understand recursion&hellip;</p>

<p>Google &ldquo;recursion&rdquo; and the top result will be &ldquo;Did you mean: <a href="https://www.google.com/search?source=ig&amp;hl=en&amp;rlz=&amp;q=recursion&amp;oq=recursion&amp;aq=f&amp;aqi=n1g10&amp;aql=&amp;gs_nf=1&amp;gs_l=igoogle.3..5j0l10.597.1713.0.2449.7.7.0.0.0.0.63.375.7.7.0."><em>recursion</em></a>&rdquo;</p>

<p>In college one of my professors had stated that recursion is a method for making the computer do most of the work for you.  Its a way to reduce a a complex algorthm to a few lines with a base case.</p>

<p>But object-oriented recursion is a bit different;</p>

<!-- more -->




<blockquote><p>object-oriented recursion represents the invocations themselves as objects, sending the same message to different objects</p><footer><strong>Kent Beck</strong> <cite><a href='http://www.macqueen.us/smalltalkReport/ST/ST09/27be.pdf'>Object-Oriented Recursion the Smalltalk Report</a></cite></footer></blockquote>


<p><span class='pullquote-right' data-pullquote='a quick review of procedural recursion'>
Procedural recursion is coded as a function that calls itself with different parameters until a base case is met.<br/>
Let&rsquo;s have a quick review of procedural recursion using a purposely verbose factorial function;
</span></p>

<figure class='code'><figcaption><span>A puposely verbose factorial function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">factorial</span> <span class="n">aNumber</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">aNumber</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">recursiveCallResult</span> <span class="o">=</span> <span class="p">(</span><span class="n">factorial</span><span class="p">(</span><span class="n">aNumber</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">aNumber</span> <span class="o">*</span> <span class="n">recursiveCallResult</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Okay, so we need to know the factorial of 3. We have written the above function and now we&rsquo;ll execute it with the number three. The execution would look something like this (the verbosity will make sense)</p>

<pre><code>#factorial(3)  
3 != 1  
recursiveCallResult = (factorial(3 - 1))  
result = null  

#factorial(2)  
2 != 1  
recursiveCallResult = (factorial(2-1))  
result = null  

#factorial(1)  
1 == 1  
recursiveCallResult = null  
result = 1  
</code></pre>

<p>  The base case of the function is met and the operation begins to &ldquo;unwind&rdquo; back up to the original call;</p>

<pre><code>#factorial(2)    
recursiveCallResult = 1  
result = 2 * 1  
result = 2   

#factorial(3)
recursiveCallResult = 2  
result = 3 * 2  
reusult = 6  
</code></pre>

<p>As it turns out, the factorial of 3 is 6!! Cool!</p>

<p><span class='pullquote-right' data-pullquote='Object-Oriented Recursion'>
Object-Oriented Recursion is a way to make the objects do all the work!!
</span></p>

<p>Kent Beck&rsquo;s article on <a href=http://www.macqueen.us/smalltalkReport/ST/ST09/27be.pdf>Object-Oriented Recursion</a> was an epiphany to me when I first read it in 1996.  It opened my eyes to different ways of working with objects.  It made even more clear to me the concept of <a href=http://www.wordiq.com/definition/Polymorphism_in_object-oriented_programming>polymorphism</a>.  To be able to send the same message to different objects is a powerful concept.</p>

<p> I have used the Peano Number example from the article when teaching myself a new programming language as it helps me to understand how polymorphism can be applied in that language.  Also the example is just plain fun.  If interested, the translations are available for <a href=https://github.com/thutch/PeanoNumber.Ruby>Ruby</a>, <a href=https://github.com/thutch/PeanoNumber.CSharp>C#</a>, and <a href=https://github.com/thutch/PeanoNumber.DartLang>Dart</a>.</p>

<h4>Mancala &amp; OO Recursion</h4>

<p>Recently I participated in a <a href=http://dallashackclub.com/>Dallas Hack Club</a> where the kata for that night was the <a href=https://gist.github.com/2153731>Mancala game</a>.  Mancala is a two player game where each person takes turns &ldquo;sowing&rdquo; seeds from well to well.</p>

<p>One of the classes that we created for the Mancala game kata was the Well.  A Mancala &lsquo;well&rsquo; holds a number of seeds and is owned by a player.  On a players turn, the player will take all the seeds from a selected well,  then &ldquo;sow&rdquo; a single seed to each well starting on the well to the right till all the seeds picked up from the initial well have been &ldquo;sown&rdquo;, then the next player takes their turn.</p>

<p><span class='pullquote-right' data-pullquote='demonstrate an object-oriented recursion solution.'>
The &lsquo;Well&rsquo; class for the Mancala game presented an excellent opportunity to demonstrate an object-oriented recursion solution. Especially since there is also a GoalWell which is handled a bit differently when the seeds are sown.  A player can only place a seed in a goal well when the player owns that goal well.<br/>
</span></p>

<figure class='code'><figcaption><span>Class Well</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Well</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:next_well</span><span class="p">,</span> <span class="ss">:seeds</span><span class="p">,</span> <span class="ss">:owner</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span> <span class="n">anOwner</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">seeds</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">owner</span> <span class="o">=</span> <span class="n">anOwner</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">sow</span>
</span><span class='line'>    <span class="n">current_seeds</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">seeds</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">seeds</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">next_well</span><span class="o">.</span><span class="n">take_seed</span><span class="p">(</span><span class="n">current_seeds</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">owner</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">take_seed</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">player</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">seeds</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>       <span class="nb">self</span><span class="o">.</span><span class="n">next_well</span><span class="o">.</span><span class="n">take_seed</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">player</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each well knows about the well to its right, its next_well, so the data structure is a circular linked list.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">player1</span> <span class="o">=</span> <span class="ss">:player1</span>
</span><span class='line'><span class="n">well01</span> <span class="o">=</span> <span class="no">Well</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">player1</span><span class="p">)</span>
</span><span class='line'><span class="n">well02</span> <span class="o">=</span> <span class="no">Well</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">player1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">well01</span><span class="o">.</span><span class="n">next_well</span> <span class="o">=</span> <span class="n">well02</span>
</span><span class='line'><span class="n">well02</span><span class="o">.</span><span class="n">next_well</span> <span class="o">=</span> <span class="n">well01</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each well can be assigned a number of seeds;
<code>well01.seeds = 2</code></p>

<p>When gameplay begins,  a player will select a well and will &ldquo;sow&rdquo; from that well; <code>well01.sow</code></p>

<p>The sow method is the starting method for the operation.</p>

<figure class='code'><figcaption><span>Well class sow method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">sow</span>
</span><span class='line'>    <span class="n">current_seeds</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">seeds</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">seeds</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">next_well</span><span class="o">.</span><span class="n">take_seed</span><span class="p">(</span><span class="n">current_seeds</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">owner</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>1) In this method, the current number of the seeds is held in a temporary variable &ldquo;current_seeds&rdquo;; <code>current_seeds = self.seeds</code><br/>
2) The seeds instVar is set to 0; <code>self.seeds = 0</code><br/>
3) Lastly, the well&rsquo;s next_well is requested to take_seed sending the current_seeds and starting well&rsquo;s owner for the parameters.
This line of code <code>self.next_well.take_seed(current_seeds, self.owner)</code> begins the object-oriented recursive operation,</p>

<p>Lets have a closer look at the <code>take_seed</code> method;</p>

<figure class='code'><figcaption><span>Well class take_seed method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">take_seed</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">player</span><span class="p">)</span>
</span><span class='line'>   <span class="nb">self</span><span class="o">.</span><span class="n">seeds</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>   <span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>   <span class="k">if</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>     <span class="nb">self</span><span class="o">.</span><span class="n">next_well</span><span class="o">.</span><span class="n">take_seed</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">player</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>1) One is added to this well&rsquo;s seed count; <code>self.seeds += 1</code>.<br/>
2) The count that is passed in is reduced by 1; <code>count = count - 1</code><br/>
3) <code>if count &gt; 0</code> tests for the base case. If count is <strong>not</strong> greater than zero, then the base case is met and the operation will not continue.
3) If count is greater than zero, then the next_well is called to `take_seed&#8217;</p>

<p><span class='pullquote-right' data-pullquote='Mancala Goal Well'>
Lets now look at the Mancala Goal Well. According to the rules a player can only place seeds in his own goal well.<br/>
Lets create a subclass of Well to handle this special case for take_seed.
</span></p>

<figure class='code'><figcaption><span>GoalWell</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">GoalWell</span> <span class="o">&lt;</span> <span class="no">Well</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">take_seed</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">player</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">player</span> <span class="o">==</span> <span class="nb">self</span><span class="o">.</span><span class="n">owner</span>
</span><span class='line'>      <span class="k">super</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">next_well</span><span class="o">.</span><span class="n">take_seed</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">player</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When a GoalWell is sent the message take_seed, it must first check if the player is the same as the owner.  If it is, then it will call its super class&#8217; implementation of the take_seed method.</p>

<p>If the GoalWell&rsquo;s owner is not the same as the player,  then the GoalWell call&rsquo;s its next_well to take_seed.  The distribution of the starting well&rsquo;s seeds continues till the base case of no more seeds (a count of zero) is reached.  Then the next player can select a well and sow.</p>

<p>Okay, we&rsquo;ve described the code,  lets look at what the &ldquo;sow&rdquo; execution would look like.</p>

<p><span class='pullquote-right' data-pullquote='a step by step description of the execution'>
Let&rsquo;s create some wells and do a step by step description of the execution.
</span></p>

<pre><code>well01 = Well.new(:player1)  
player1GoalWell = GoalWell.new(:player1)  
well02 = Well.new(:player2)  
player2GoalWell = GoalWell.new(:player2)`
</code></pre>

<p>Now lets link our wells up together;</p>

<pre><code>well01.next_well = player1GoalWell  
player1GoalWell.next_well = well02  
well02.next_well = player2GoalWell  
player2GoalWell.next_well = well01
</code></pre>

<p>We&rsquo;ll place 3 seeds in well01, <code>well01.seeds = 3</code>.  The other wells seeds are initalized to 0.  Play will begin with with well01 invoking &ldquo;sow&rdquo;.</p>

<pre><code>#well01.sow
  ------instVars well01 -----
  well owner is player1
  self.seeds is 3
  next_well is player1GoalWell
  ------------------------------
  current_seeds is 3
  self.seeds is set to 0
  next_well(count=3, player=:player1)
</code></pre>

<p>player1GoalWell is the next_well and belongs to player1.  Also player1GoalWell is a GoalWell class.</p>

<pre><code>#player1GoalWell.take_seed(count = 3, player = :player1)
  ------instVars for player1GoalWell -----
  owner is :player1
  self.seeds is 0
  next_well is well02
  ---------------------------------
  :player1 does equal self.owner &lt;:player1&gt;
    so we call the super take_seed implementation on the Well class
  self.seeds = 1 = 0 + 1
  count is 2 = 3 -1
  count is GREATER than 0 and the base case has NOT been met, execution continues
     next_well(count=2, player=:player1)
</code></pre>

<p>well02 is the next_well and belongs to :player2.  It is a Well class.</p>

<pre><code>#well02.take_seed(count = 2, player = :player1)
  ------instVars for well02 -----
  owner is :player2
  self.seeds is 0
  next_well is player2GoalWell
  ---------------------------------
  self.seeds = 1 = 0 + 1
  count is 1 = 2 -1
  count is GREATER than 0 and the base case has NOT been met, execution continues
     next_well(count=1, player=:player1)
</code></pre>

<p>The next_well is player2GoalWell. It belongs to :player2, so it will do something a bit different;</p>

<pre><code>#player2GoalWell.take_seed(count = 1, player = :player1)
  ------instVars for player1GoalWell -----
  owner is :player2
  self.seeds is 0
  next_well is well02
  ---------------------------------
  :player1 does NOT equal self.owner &lt;:player2&gt;
    so the code calls the next_well  take_seed implementation on the Well class
  next_well(count=1, player=:player1)
  self.seeds remains 0
</code></pre>

<p>The next_well is well01, right back where we started from!</p>

<pre><code>#well01.take_seed(count = 1, player = :player1)
  ------instVars for well01 -----
  owner is :player1
  self.seeds is 0
  next_well is player1GoalWell
  ---------------------------------
  self.seeds = 1 = 0 + 1
  count is 0 = 1 - 1
  count is NOT greater than 0.  The base case has been met so the operation stops here!!
</code></pre>

<p>Each of the wells count for seeds should be</p>

<pre><code>    well01.seeds is 1  
    player1GoalWell is 1  
    well02.seeds is 1  
    player2GoalWell is 0  
</code></pre>

<p><span class='pullquote-right' data-pullquote='Have fun with OO recursion!!'>
This Mancala Well example demonstrates Object-Oriented Recursion with two well types, Well and GoalWell being polymorphic, performing the take_seed operation. Each well delegates to the next well to handle updating their seed count, decrementing from the seeds being sown and testing for the base case to end the sow operation.</p>

<p> Have fun with OO recursion!!
</span></p>

<p>The source for this example can be found at <a href=https://gist.github.com/2395565>Mancala Well</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, World]]></title>
    <link href="http://thutch.github.io/blog/2012/04/15/hello/"/>
    <updated>2012-04-15T09:32:00-05:00</updated>
    <id>http://thutch.github.io/blog/2012/04/15/hello</id>
    <content type="html"><![CDATA[<p>My initiation into blogging</p>

<figure class='code'><figcaption><span>Hello World</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">HelloWorld</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hello</span>
</span><span class='line'>      <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;Hello, World</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;Yes, it&#39;s a cheesy start of a blog&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
